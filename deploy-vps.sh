#!/bin/bash

# Script de deploy autom√°tico para VPS
# Este script √© executado na VPS via webhook

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

log "üöÄ Iniciando deploy autom√°tico..."

# Verificar se est√° no diret√≥rio correto
if [ ! -f "package.json" ]; then
    error "package.json n√£o encontrado. Execute no diret√≥rio do projeto."
    exit 1
fi

# Fazer backup do build anterior
if [ -d "dist" ]; then
    log "üì¶ Fazendo backup do build anterior..."
    mv dist dist.backup.$(date +%Y%m%d_%H%M%S) 2>/dev/null || true
fi

# Parar processos PM2 se existirem
log "‚èπÔ∏è Parando processos antigos..."
pm2 stop triagem-webhook 2>/dev/null || warn "Nenhum processo PM2 encontrado"

# Atualizar c√≥digo do Git
log "üì• Atualizando c√≥digo do reposit√≥rio..."
git fetch origin main
git reset --hard origin/main
log "‚úÖ C√≥digo atualizado"

# Verificar se .env existe
if [ ! -f ".env" ]; then
    warn "Arquivo .env n√£o encontrado, criando template..."
    cat > .env << 'EOF'
VITE_SUPABASE_URL=https://seu-projeto.supabase.co
VITE_SUPABASE_ANON_KEY=sua-chave-anonima
EOF
    warn "‚ö†Ô∏è Configure as vari√°veis em .env antes do pr√≥ximo deploy"
fi

# Instalar depend√™ncias
log "üì¶ Instalando depend√™ncias..."
npm ci --production=false || {
    error "Falha ao instalar depend√™ncias"
    exit 1
}

# Fazer build
log "üî® Fazendo build do projeto..."
npm run build || {
    error "Falha no build do projeto"
    exit 1
}

# Verificar se o build foi criado
if [ ! -d "dist" ]; then
    error "Diret√≥rio dist n√£o foi criado"
    exit 1
fi

# Configurar permiss√µes
log "üîê Configurando permiss√µes..."
chown -R www-data:www-data dist/ 2>/dev/null || warn "Falha ao configurar permiss√µes"

# Testar configura√ß√£o do Nginx
log "üß™ Testando configura√ß√£o do Nginx..."
nginx -t || {
    error "Configura√ß√£o do Nginx inv√°lida"
    exit 1
}

# Recarregar Nginx
log "üåê Recarregando Nginx..."
systemctl reload nginx || {
    error "Falha ao recarregar Nginx"
    exit 1
}

# Verificar se o Nginx est√° rodando
if ! systemctl is-active --quiet nginx; then
    error "Nginx n√£o est√° rodando"
    exit 1
fi

# Limpar builds antigos (manter apenas os 3 mais recentes)
log "üßπ Limpando builds antigos..."
ls -t dist.backup.* 2>/dev/null | tail -n +4 | xargs rm -rf 2>/dev/null || true

# Reiniciar webhook
log "üîÑ Reiniciando webhook..."
pm2 restart triagem-webhook 2>/dev/null || pm2 start ecosystem.config.cjs 2>/dev/null || true
pm2 save 2>/dev/null || true

log "‚úÖ Deploy conclu√≠do com sucesso!"
log "üåê Site dispon√≠vel em: http://$(hostname -I | awk '{print $1}')"
log "üìä Tamanho do build: $(du -sh dist/ | cut -f1)"
log "üìù Arquivos no build: $(find dist/ -type f | wc -l)"

# Mostrar status final
echo ""
info "üìä Status dos servi√ßos:"
echo "Nginx: $(systemctl is-active nginx)"
echo "PM2: $(pm2 list 2>/dev/null | grep -c online || echo '0') processos online"
echo "√öltima atualiza√ß√£o: $(date)"